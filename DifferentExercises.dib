#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!javascript

const horror = ['Freddy', 'Jason', 'Michael', 'Ghostface', 'Chucky'];

let fourthItem = horror[3];


console.log(fourthItem);

#!javascript

const  netflixShows = ["Orange is the New Black", "Black Mirror", "Chewing Gum"];

// Adding element to the array.
netflixShows.push("netflixShows");

// Write a console.log statement below to check your work!
console.log(netflixShows);

#!javascript

const synonyms = ['fantastic', 'wonderful', 'great'];
const greetings = [];

// 1.
// Loop through the synonyms array. Each time, push a string into the greetings array. 
// The string should have the format 'Have a [synonym] day!'
// ADD CODE HERE
for (let i = 0; i < synonyms.length; i++) {
  let newString = "Have a "+ synonyms[i] + " day!";
  greetings.push(newString);
}

// 2. 
// Loop through the greetings array, logging each greeting to the console:
// 'Have a fantastic day!'
// 'Have a wonderful day!'
// 'Have a great day!'
// ADD CODE HERE
for (let i = 0; i < greetings.length; i++){
  console.log(greetings[i])
}

#!javascript

const increaseByTwo = [1, 2, 3, 4, 5];
// ADD CODE HERE
for(let i =0; i<increaseByTwo.length; i++){
  increaseByTwo[i] += 2;
}

// Uncomment the line below to check your work!
console.log(increaseByTwo); // -> should print [3, 4, 5, 6, 7];

#!javascript

const checkObj = {
    oddNum: 1,
    evenNum: 2,
    foundNum: 5,
    randomNum: 18
  };
  
  let found = 0;
  // ADD CODE HERE
  for(const property in checkObj ){
    if(property === "foundNum"){
      found =1;
    }
  }
  console.log(found);

#!javascript

const sumMe = {
    hello: 'there',
    you: 8,
    are: 7,
    almost: '10',
    done: '!'
  };
  let total = 0;
  // ADD CODE HERE
  for (const prop in sumMe){
    if(typeof sumMe[prop] === "number"){
      total += sumMe[prop];
    }
  }
  console.log(total);

#!javascript

function StartGame() {
    let input;
    input = prompt("Welcome to Blackjack. Do you want to play? (Y)es or (N)o").toUpperCase();
  
    if (input == 'Y') {
      console.log("Game starting...")
    }
  }
  
  StartGame();

#!javascript

const x = 3;

function isX1(num) {
    const x = 5;
    return num === x;
}

function isX2(num) {
    return num === x;
}

const one = isX1(5);
const two = isX2(3);


console.log(one); // should log: true
console.log(two); // should log: true

#!javascript

let friendsAvailable = true;

function makePlans(name) {

  return callFriend(friendsAvailable, name);
}

function callFriend(bool, name) {

  if (bool == true){
   return "Plans made with" + " " + name + " "  + "this weekend";
  }
  else{
   return "Everyone is busy this weekend";
  }
}


console.log(makePlans("Mary")) // should return: "Plans made with Mary this weekend'
friendsAvailable = false;
console.log(makePlans("James")) //should return: "Everyone is busy this weekend."

#!javascript

function isOdd(num){
    if(num %2 != 0){
      return true;
        }
    else{
      return false;
    }
  }
  
  console.log(isOdd(5)); // should log: true
  console.log(isOdd(2008)); // should log: false

#!javascript

function getRemainder(num1, num2) {
     if(num1 > num2){
    return num1%num2
  }  
  else{
     return  num2%num1;
  }
   
  }
  
  
  console.log(getRemainder(17, 5)); // => 2
  console.log(getRemainder(20, 5)); // => 0
  console.log(getRemainder(8, 22)); // => 6
  console.log(getRemainder(7, 42)); // => 0

#!javascript

function greetings(hour) {
    
    if(hour < 12){
      return 'Good Morning!';}
    else if (hour >= 12 && hour <15){
      return 'Good Afternoon!';
        }
    else{
      return 'Good Night!';
    }
      
  }
  
  
  console.log(greetings(8)); // expected log 'Good Morning!'
   console.log(greetings(12)); // expected log 'Good Afternoon!'
   console.log(greetings(14)); // expected log 'Good Afternoon!'
   console.log(greetings(15)); // expected log 'Good Night!'
   console.log(greetings(18)); // expected log 'Good Night!'
  

#!javascript

// Loops & Control Flow.
function mergingTripletsAndQuints(array1, array2) {

        let newArr = [];
   
         for (let i = 0; Math.max(i < array1.length, i < array2.length); i++) {
           if (array1[i] % 3 === 0 || array1[i] % 5 === 0) {
             newArr.push(array1[i] + array2[i]);
           } else {
             newArr.push(array1[i]);
           }
         }
         return newArr;
       }
   
   // Uncomment these to check your work!
   console.log(mergingTripletsAndQuints([1, 2, 3, 4, 5, 15], [1, 3, 6, 7, 8, 9])); // expected log [1, 2, 9, 4, 13, 24]
   console.log(mergingTripletsAndQuints([1, 1, 3, 9, 5, 15], [1, 2, 3, 4, 5, 6])); // expected log [1, 1, 6, 13, 10, 21]

#!javascript

function imAboutToExplodeWithExcitement(n){
    while(n){
      if(n === 5){
       console.log("Oh wow, I can't handle the anticipation!"); 
      }else if(n === 3){
       console.log("I'm about to explode with excitement!"); 
      }else{
       console.log(n);
      }
      n--;
    }
      console.log('That was kind of a let down');
  }
  // Uncomment the line below to check your work!
  imAboutToExplodeWithExcitement(10);

#!javascript

function getTheRange(arr){
    
    let low = arr[0], high = arr[0];
    
    for (let i = 1; i < arr.length; i++) {
      if (arr[i] < low) {
        low = arr[i];
      } else {
        high = arr[i];
      }
    }
    let range = high - low;
    return [low, high, range];
  };
  
  
  // Uncomment these to check your work!
  console.log(getTheRange([3, 2, 5, 4, 7, 9, 10])); // expect log [2, 10, 8]

#!javascript

//Functions - Function Expression
// Convert the function named functionDeclaration to an anonymous function 
// expression and assign it to a variable called myFunc.

let myFunc = function() {
    return "Hi there!";
}


console.log(myFunc());// should log: "Hi there!"

#!javascript

function addingAllTheWeirdStuff(array1, array2) {
 
    let sumOdd = 0;
    let sumEven = 0;
    let greaterThan20 = false; 
    
    for (let i = 0; i < array2.length; i++) {
      if (array2[i] % 2 !== 0)
        sumOdd += array2[i];
      else
        sumEven += array2[i];
      if (array2[i] > 20)
        greaterThan20 = true;
    }
    for (let i = 0; i < array1.length; i++) {
      if (array1[i] < 10)
        array1[i] += sumOdd;
      else if (array1[i] > 10)
        array1[i] += sumEven;
      if (greaterThan20)
        array1[i] += 1;
    }
    return array1;
  }
  
  // Uncomment these to check your work!
  console.log(addingAllTheWeirdStuff([1, 3, 5, 17, 15], [1, 2, 3, 4, 5])); // expected log [10, 12, 14, 23, 21]
  console.log(addingAllTheWeirdStuff([1, 3, 5, 17, 15, 1], [1, 2, 3, 4, 5, 22])); // expected log [11, 13, 15, 46, 44, 11]

#!javascript

// Enums
const Seasons = {
    Summer: 0,
    Autumn: 1,
    Winter: 2,
    Spring: 3
}


console.log(Seasons.Winter)

#!csharp

// Enums, example 2. Ho to use them.

enum Level 
{
  Low,
  Medium,
  High
}

Level myVar = Level.Medium;
Console.WriteLine(myVar);

#!csharp

// Enum example in a class.
class Program
{
  enum Level
  {
    Low,
    Medium,
    High
  }
  static void Main(string[] args)
  {
    Level myVar = Level.Medium;
    Console.WriteLine(myVar);
  }
}

#!javascript

// global data.

/*let gameState = {
    gameOver: false,
    player: [],
    computer: [],
    playerScore: 0,
    computerScore: 0,
    deck: []
};*/

let gameOver = false;
let player = '';
let computer = '';
let computerScore = 0;
let playerScore = 0;
let deck = [];

let values = ['Ace', 'King', 'Queen', 'Jack', 'Ten', 'Nine', 'Eight', 'Seven',
                'Six', 'Five', 'Four', 'Three', 'Two'];
let suits = ['Hearts', 'Clubs', 'Diamonds', 'Spades'];


function createDeck() {
    
    for (let suitIdx = 0; suitIdx < suits.length; suitIdx++) {
      for (let valueIdx = 0; valueIdx < values.length; valueIdx++) {
        let card = {
          suit: suits[suitIdx],
          value: values[valueIdx]
        };
        deck.push(card);
      }
    }
    return deck;
  }
  
  console.log(createDeck());

  function shuffleDeck(deck) {
    for (let i = 0; i < 52; i++) {
      let tempCard = deck[i];
      let randomIndex = Math.floor(Math.random() * 52);
      deck[i] = deck[randomIndex];
      deck[randomIndex] = tempCard;
    }
   }
  
  shuffleDeck(deck);
  console.log(deck);

#!javascript

var suits = ["Spades", "Hearts", "Diamonds", "Clubs"];
var values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"];
var deck = new Array();

function createDeck()
{
    deck = new Array();
    for (var i = 0 ; i < values.length; i++)
    {
        for(var x = 0; x < suits.length; x++)
        {
            var weight = parseInt(values[i]);
            if (values[i] == "J" || values[i] == "Q" || values[i] == "K")
                weight = 10;
            if (values[i] == "A")
                weight = 11;
            var card = { Value: values[i], Suit: suits[x], Weight: weight };
            deck.push(card);
        }
    }
}

console.log(createDeck());

#!javascript

// Create a list of strings.
var salmons = new List<string>();
salmons.Add("chinook");
salmons.Add("coho");
salmons.Add("pink");
salmons.Add("sockeye");

// Iterate through the list.
foreach (var salmon in salmons)
{
    Console.Write(salmon + " ");
}
// Output: chinook coho pink sockeye




// Create a list of strings by using a
// collection initializer.
var salmons = new List<string> { "chinook", "coho", "pink", "sockeye" };

// Iterate through the list.
foreach (var salmon in salmons)
{
    Console.Write(salmon + " ");
}
// Output: chinook coho pink sockeye

#!javascript

let x = myFunction(4, 3);   // Function is called, return value will end up in x

function myFunction(a, b) {
  return a * b;             // Function returns the product of a and b
}

#!javascript

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace classes
{
    public partial class frmMainClasses : Form
    {
        string EmpShift = "";
        string EmployeeName = "";
        int EmployeeNumber = 0;
        float HourlyPayRate = 0;



        public class Employee
        {
            public string EmployeeName { get; set; }
            public int EmployeeNumber { get; set; }
        }

        public class ProductionWorker : Employee
        {
            public float HourlyPayRate { get; set; }
            public Shift Shift { get; set; }
        }

        public enum Shift
        {
            Day = 1,
            Night = 2
        }

        public frmMainClasses()
        {
            InitializeComponent();
        }

        private void btxExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnGetInfo_Click(object sender, EventArgs e)
        {
            string EmpShift = "";
            ProductionWorker productionWorker = new ProductionWorker();
            productionWorker.EmployeeName = txtName.ToString();
            EmployeeName = productionWorker.EmployeeName; //Added mostly because I couldn't get EmployeeName to show anything in the messagebox
            productionWorker.EmployeeNumber = Convert.ToInt32(txtIdNumb.text);
            productionWorker.HourlyPayRate = Convert.ToInt32(txtPay.text);
            EmpShift = Convert.ToString(txtShift.text);
            txtName.Text = "";
            txtIdNumb.Text = "";
            txtPay.Text = "";
            txtShift.Text = "";
        }

        private void btnShow_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Name " + EmployeeName + "IDNumber " + EmployeeNumber + "Hourly rate " + txtPay + "Shift " + txtShift);

        }
    }

}

#!javascript

// apllying discount to prices with map function
const prices = [10, 20, 30, 40, 50];
//using errow function
const discount = prices.map((price)=>price * 26/100)

console.log(discount);

#!javascript

const people = [
    'Creola Katherine Johnson: mathematician',
    'Mario José Molina-Pasquel Henríquez: chemist',
    'Mohammad Abdus Salam: physicist',
    'Percy Lavon Julian: chemist',
    'Subrahmanyan Chandrasekhar: astrophysicist'
  ];

  const people = [{
    id: 0,
    name: 'Creola Katherine Johnson',
    profession: 'mathematician',
  }, {
    id: 1,
    name: 'Mario José Molina-Pasquel Henríquez',
    profession: 'chemist',
  }, {
    id: 2,
    name: 'Mohammad Abdus Salam',
    profession: 'physicist',
  }, {
    name: 'Percy Lavon Julian',
    profession: 'chemist',  
  }, {
    name: 'Subrahmanyan Chandrasekhar',
    profession: 'astrophysicist',
  }];


  export default function List() {
    const listItems = people.map(person =>
      <li>{person}</li>
    );
    return <ul>{listItems}</ul>;
  }

#!javascript

//Keys allow React to keep track of elements. This way, if an item is updated or removed, 
// only that item will be re-rendered instead of the entire list.

Keys need to be unique to each sibling. But they can be duplicated globally.
function Car(props) {
    return <li>I am a { props.brand }</li>;
  }
  
  function Garage() {
    const cars = [
      {id: 1, brand: 'Ford'},
      {id: 2, brand: 'BMW'},
      {id: 3, brand: 'Audi'}
    ];
    return (
      <>
        <h1>Who lives in my garage?</h1>
        <ul>
          {cars.map((car) => <Car key={car.id} brand={car.brand} />)}
        </ul>
      </>
    );
  }
  
  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(<Garage />);

#!javascript

function hitOrStand() {

    let userInput = "s";
    
  
  if(userInput === "h"){
    conslole.log("Y!");
     
} else if (userInput === "s") {
   console.log("You hit stand!");
 }
  }
  
  hitOrStand();

#!javascript

function hitOrStand() {

    let userInput = "h";
  
    //userInput = prompt("Do you want to (H)it or (S)tand?").toUpperCase();
  
    if (userInput === "h") {
  
      playerCards.push(getNextCard());
     console.log(showStatus()); 
       
    } else if (userInput === "s") {
       console.log("You hit stand!");
    }
  }
  hitOrStand();
  
