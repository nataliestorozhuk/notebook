#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!javascript

// How to Remove Elements from an Array.Every time you call the pop() method, it removes an element 
// from the end of the array.

const salad = ['tomato', 'onion', 'corn'];
salad.pop();
console.log(salad);

#!javascript

// shift() method to remove an element from the beginning of an array.

const salad = ['tomato', 'onion', 'corn'];
salad.shift();
console.log(salad);

#!javascript

// How to Copy and Clone an Array.
// slice() method doesn't change the original array. Instead, it creates a new shallow copy of the original array.

const salad = ['tomato', 'onion', 'corn'];
const saladCopy = salad.slice();

console.log(saladCopy);

salad === saladCopy; // returns false

#!javascript

// How to Use the Spread Operator.
const salad = ['tomato', 'onion', 'corn', 'carrot', 'avocado'];
const saladCloned = [...salad];
console.log(saladCloned);

#!javascript

// How to Merge Arrays.
const names = ['Nata', 'Sasha', 'Sarah'];
const veggies = ['tomato', 'onion', 'corn', 'carrot', 'avocado'];

const namesVeggies = [...names, ...veggies];
console.log(namesVeggies)

#!javascript

// The filter() method creates a new array with all the elements 
// that satisfies the condition mentioned in the function. 

const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]

#!javascript

// The map() method creates a new array by iterating through the elements and 
// applying logic we provided in the function as an argument.

// Example 1.
let numbers = [2, 4, 6, 8, 10];

// function to return the square of a number
function square(number) {
  return number * number;
}

// apply square() function to each item of the numbers list
let square_numbers = numbers.map(square);
console.log(square_numbers);


// Example 2.
const array1 = [1, 4, 9, 16];

// pass a function to map. X is every element in the array.
const map1 = array1.map(x => x * 2);

console.log(map1);
// expected output: Array [2, 8, 18, 32]

#!javascript

// The some() method tests whether any of the array elements pass the given test function.
// a test function: returns an even number

// Example 1.
//-------------------------
function isEven(element) {
    return element % 2 === 0;
  }
  
  // defining an array
  let numbers = [1, 3, 2, 5, 4];
  
  // checks whether the numbers array contain at least one even number
  console.log(numbers.some(isEven));



  // Example 2.
//-------------------------
// a test function: returns age that is less that 18
function checkMinor(age) {
    return age < 18;
  }
  
  const ageArray = [34, 23, 20, 26, 12];
  
  // checks whether ageArray contains any element that is less than 18
  let check = ageArray.some(checkMinor);
  
  console.log(check);

#!javascript

// Every() method checks if all the array elements pass the given test function.
// Example 1.
const isBelowThreshold = (currentValue) => currentValue < 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// expected output: true

#!javascript

// The forEach() method executes a provided function once for each array element.

const array1 = ['a', 'b', 'c'];

array1.forEach(element => console.log(element));

#!javascript

// The find() method returns the first element in the provided array that satisfies the provided testing function. 
// If no values satisfy the testing function, undefined is returned.

const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// expected output: 12

#!javascript

// The includes() method determines whether an array includes a 
// certain value among its entries, returning true or false as appropriate.

const array1 = [1, 2, 3];

console.log(array1.includes(2));
// expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));
// expected output: true

console.log(pets.includes('at'));
// expected output: false

#!javascript

function getCardNumericValue(card) {
  switch (card.values) {
    case "Ace":
      return 1;
    case "Two":
      return 2;
    case "Three":
      return 3;
    case "Four":
      return 4;
    case "Five":
      return 5;
    case "Six":
      return 6;
    case "Seven":
      return 7;
    case "Eight":
      return 8;
    case "Nine":
      return 9;
    default:
      return 10;
  }
}
  
